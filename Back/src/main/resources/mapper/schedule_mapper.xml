<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.fitime.schedule.ScheduleDAO">

	<!-- 스케줄 등록 -->
	<insert id="schedule_insert">
		insert into schedule(user_id,title,content,start_date,end_date,start_time,end_time,status) 
		values(#{user_id},#{title},#{content},#{start_date},#{end_date},#{start_time},#{end_time},#{status});
	</insert>
	
	<!-- 스케줄 리스트 -->
	<select id="schedule_list" resultType="com.fitime.dto.ScheduleDTO">
		select * from schedule where user_id = #{user_id}
	</select>
	
	<!-- 스케줄 수정 -->
	<update id="schedule_update">
		UPDATE schedule
	    SET title = #{dto.title},
	    content = #{dto.content},
	    start_date = #{dto.start_date},
	    end_date = #{dto.end_date},
	    start_time = #{dto.start_time},
	    end_time = #{dto.end_time},
	    status = #{dto.status}
	    WHERE user_id = #{user_id} and schedule_idx = #{schedule_idx}
	</update>
	
	<!-- 스케줄 삭제 -->
	<delete id="schedule_del">
		delete from schedule where user_id = #{user_id} and schedule_idx = #{schedule_idx}
	</delete>
	
	<!-- 회원용 클래스 리스트 -->
	<select id="user_reservation_schedule" resultType="map">
		SELECT
		    cp.center_name
		    ,p.product_name
			,r.date AS reservation_date
		    ,(SELECT name FROM user u WHERE r.trainer_id=u.user_id) AS trainer_name
		    ,IF(r.class_idx IS NOT NULL, c.start_time, r.start_time) AS start_time
		    ,IF(r.class_idx IS NOT NULL, c.end_time, r.end_time) AS end_time
		FROM reservation r
		JOIN product p ON r.product_idx = p.product_idx
		JOIN center_profile cp ON r.center_id = cp.center_id
		LEFT JOIN class c ON r.class_idx = c.class_idx
		WHERE r.user_id=#{user_id} AND r.status = '예약'
		ORDER BY start_time
	</select>
	
	<!-- 트레이너용 클래스 리스트 -->
	<select id="trainer_reservation_schedule" resultType="map">
		SELECT DISTINCT
		    cp.center_name
		    ,p.product_name
			,r.date AS reservation_date
 		    ,IF(r.class_idx IS NOT NULL, c.start_time, r.start_time) AS start_time
 		    ,IF(r.class_idx IS NOT NULL, c.end_time, r.end_time) AS end_time
 		    ,r.date
 		    ,c.class_idx
		FROM reservation r
		JOIN product p ON r.product_idx = p.product_idx
		JOIN center_profile cp ON r.center_id = cp.center_id
		LEFT JOIN class c ON r.class_idx = c.class_idx
		WHERE r.trainer_id=#{trainer_id} AND r.status = '예약'
		AND (r.start_time IS NOT NULL OR c.start_time IS NOT NULL)
		AND (r.end_time IS NOT NULL OR c.end_time IS NOT NULL)
		ORDER BY date
	</select>
	
	<!-- 트레이너 캘린더 센터 휴무 동기화 -->
	<select id="get_center_dayoff" resultType="com.fitime.dto.ScheduleDTO">
		SELECT
			s.title
			,s.content
			,s.start_date
			,s.end_date
			,s.status
		FROM schedule s
		WHERE s.status  = '휴무'
		AND s.user_id = (
			SELECT cp.center_id FROM trainer_profile tp JOIN center_profile cp ON tp.center_idx = cp.center_idx 
			WHERE tp.trainer_id = #{param1})
	</select>
	
	<!-- 회원 잔여횟수 / 남은 기간 조회 -->
	<select id="user_remaining_count" resultType="map">
		SELECT
			p.product_name
			,p.count AS total_cnt
			,COUNT(r.reservation_idx) AS used_cnt
			,(p.count - COUNT(r.reservation_idx)) AS remaining_cnt
			,MIN(r.date) AS start_date
			,DATE_ADD(r.date, INTERVAL p.duration MONTH) AS expire_date
			,DATEDIFF(DATE_ADD(r.date, INTERVAL p.duration MONTH), CURDATE()) AS remaining_days
		FROM reservation r
		JOIN product p ON r.product_idx = p.product_idx
		WHERE r.user_id = #{user_id}
		AND r.status = '예약' AND r.reservation_idx=#{reservation_idx} GROUP BY p.product_idx
	</select>
	
</mapper>